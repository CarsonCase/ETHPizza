{
  "language": "Solidity",
  "sources": {
    "contracts/IOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// Interface for the child contract\ninterface IOrder {\n    receive() external payable;\n}\n"
    },
    "contracts/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IRouter {\n    function onPaymentCallback() external;\n}"
    },
    "contracts/Order.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IOrder.sol\";\nimport \"./IRouter.sol\";\n\ncontract Order is IOrder {\n    IRouter public router;\n    uint public paymentAmount;\n\n    address payable treasury;\n\n    error InvalidAmount(uint required, uint sumbitted);\n\n    constructor(IRouter _router, address payable _treasury, uint _paymentAmount) {\n        router = _router;\n        treasury = _treasury;\n        paymentAmount = _paymentAmount;\n    }\n\n    receive() external override payable {\n        if(msg.value != paymentAmount){\n            revert InvalidAmount(paymentAmount, msg.value);\n        }\n\n        router.onPaymentCallback();\n        treasury.transfer(msg.value);\n    }\n}\n"
    },
    "contracts/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Order.sol\";\nimport \"./IRouter.sol\";\n\ncontract Router is IRouter{\n    address public owner;\n    IOrder[] public orders;\n\n    uint totalRefundsToday;\n    uint lastRefund;\n    uint constant refundLimit = 0.1 ether;\n\n    event Received(address indexed sender);\n    event OrderCreated(address indexed orderAddress);\n\n    error RefundLimitReached();\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can call this function.\");\n        _;\n    }\n\n    modifier beforeRefund(uint _amount){\n        if(lastRefund >= 1 days){\n            totalRefundsToday = 0;\n        }\n        totalRefundsToday += _amount;\n        lastRefund = block.timestamp;\n        if(totalRefundsToday > refundLimit){\n            revert RefundLimitReached();\n        }\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function newOrder() external onlyOwner {\n        Order order = new Order(this, payable(address(this)), 0);\n        orders.push(order);\n        emit OrderCreated(address(order));\n    }\n\n    function issueRefund(address payable _receiver, uint _amount) external onlyOwner beforeRefund(_amount){\n        _receiver.transfer(_amount);\n    }\n\n\n    function onPaymentCallback() external override {\n        emit Received(msg.sender);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}